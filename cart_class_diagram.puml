@startuml Cart_Class_Diagram
' Cart System Class Diagram

title Cart System Class Diagram

package "Frontend" {
    class CartContext {
        -cartItems: CartItem[]
        -selectedItems: Set<string>
        -loading: boolean
        +addToCart(product, quantity): void
        +updateCartItem(product, quantity): void
        +removeFromCart(product): void
        +selectItem(productId, selected): void
        +selectAllItems(selected): void
        +getSelectedItems(): CartItem[]
        +loadCart(): void
    }
    
    class CartService {
        -apiCartService: ApiCartService
        -localCartService: LocalCartService
        +addToCart(product, quantity): CartItem
        +updateCartItem(product, quantity): CartItem
        +removeFromCart(product): void
        +getCartItems(): CartItem[]
        +updateServiceReference(): void
    }
    
    class ApiCartService {
        +addToCart(product, quantity): CartItem
        +updateCartItem(product, quantity): CartItem
        +removeFromCart(product): void
        +getCartItems(): CartItem[]
    }
    
    class LocalCartService {
        +addToCart(product, quantity): CartItem
        +updateCartItem(product, quantity): CartItem
        +removeFromCart(product): void
        +getCartItems(): CartItem[]
        -saveToLocalStorage(): void
        -loadFromLocalStorage(): CartItem[]
    }
    
    class CartPage {
        -cartItems: CartItem[]
        -selectedItems: Set<string>
        -stockWarnings: Map<string, string>
        +validateStockOnLoad(): void
        +handleQuantityUpdate(product, quantity): void
        +handleRemoveItem(product): void
        +handleSelectItem(productId, selected): void
        +handleSelectAll(selected): void
        +handleCheckout(): void
    }
}

package "Backend" {
    class CartController {
        +getCartItems(userId): List<CartItemDTO>
        +addToCart(cartItemDTO, userId): CartItemDTO
        +updateCartItem(cartItemDTO, userId): CartItemDTO
        +removeFromCart(productDTO, userId): void
        +clearCart(userId): void
    }
    
    class CartService {
        +getCartItems(customerId): List<CartItemDTO>
        +addToCart(customerId, productId, quantity): CartItemDTO
        +updateCartItem(customerId, productId, quantity): CartItemDTO
        +removeFromCart(customerId, productId): void
        +clearCart(customerId): void
    }
    
    class CartItemRepository {
        +findByCustomer(customer): List<CartItem>
        +findById(cartItemId): Optional<CartItem>
        +save(cartItem): CartItem
        +deleteById(cartItemId): void
        +deleteByCustomer(customer): void
        +existsById(cartItemId): boolean
    }
    
    class ProductRepository {
        +findById(productId): Optional<Product>
        +findByCategory(category): List<Product>
        +searchProducts(keyword, category, minPrice, maxPrice, pageable): Page<Product>
    }
}

package "DTOs" {
    class CartItemDTO {
        +productDTO: ProductDTO
        +quantity: Integer
    }
    
    class ProductDTO {
        +productID: String
        +title: String
        +price: Double
        +quantity: Integer
        +category: String
        +imageURL: String
    }
}

package "Entities" {
    class CartItem {
        +id: CartItemId
        +customer: Users
        +product: Product
        +quantity: Integer
    }
    
    class CartItemId {
        +userID: Integer
        +productID: String
    }
    
    class Product {
        +productID: String
        +title: String
        +price: Double
        +quantity: Integer
        +category: ProductType
        +imageURL: String
    }
    
    class Users {
        +id: Integer
        +username: String
        +email: String
    }
}

' Relationships
CartContext --> CartService
CartService --> ApiCartService
CartService --> LocalCartService
CartPage --> CartContext

CartController --> CartService
CartService --> CartItemRepository
CartService --> ProductRepository

CartItemRepository --> CartItem
CartItem --> CartItemId
CartItem --> Product
CartItem --> Users

CartItemDTO --> ProductDTO
CartItem --> CartItemDTO : maps to

' Notes
note top of CartService : "No stock validation during add/update"
note top of CartPage : "Stock validation during load"
note top of CartController : "Stock validation only at critical points"

@enduml 