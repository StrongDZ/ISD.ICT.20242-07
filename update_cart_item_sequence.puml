@startuml Update_Cart_Item
' Update Cart Item â€“ Frontend + Backend (simplified API)

title Update Cart Item Flow

actor User
boundary CartPage
control CartContext
control CartService
control LocalCartService
control ApiCartService
boundary API
control CartController
control BCartService
entity ProductRepository
entity CartItemRepository
entity Product
entity CartItem

User -> CartPage: Change item quantity
CartPage -> CartContext: updateCartItem(product, newQty)
CartContext -> CartService: updateCartItem(product, newQty)
CartService -> CartService: updateServiceReference() 
note right: Update service reference \nbased on authentication status

alt Authenticated user
    CartService -> ApiCartService: updateCartItem(product, newQty)
    ApiCartService -> API: PUT api/cart
    API -> CartController: updateCartItem(dto)
    CartController -> BCartService: updateCartItem(dto, userId)
    BCartService -> ProductRepository: findById(productId)
    ProductRepository -> Product: read
    Product --> ProductRepository
    BCartService -> CartItemRepository: findById(userId, productId)
    CartItemRepository -> CartItem: read
    CartItem --> CartItemRepository
    
    BCartService -> CartItemRepository: save(updatedCartItem)
    CartItemRepository -> CartItem: save
    CartItem --> CartItemRepository
    BCartService --> CartController: CartItemDTO
    CartController --> API: 200 OK
    API --> ApiCartService: CartItemDTO
    ApiCartService --> CartService: CartItemDTO
else Guest user
    CartService -> LocalCartService: updateCartItem(product, newQty)
    LocalCartService -> LocalCartService: save to localStorage
    LocalCartService --> CartService: Updated CartItem / Error
end

CartService --> CartContext: Result
CartContext --> CartPage: update UI / show error
CartPage --> User: Feedback

@enduml 